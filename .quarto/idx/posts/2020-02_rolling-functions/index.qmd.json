{"title":"Rolling Functions Along columns","markdown":{"yaml":{"title":"Rolling Functions Along columns","description":"How to apply aggregate functions that 'roll' across data","author":"Michelle Evans","date":"2/11/2020","draft":false},"headingText":"| warning: false","containsRefs":false,"markdown":"\n\nRolling, or window, functions allow you to apply a function over a window of size `n` of a vector, such as a column in a dataframe. This is especially useful when you want to know the accumulation of some variable over time, like precipitation over the past month or the count of some occurrence in a surrounding number of days.\n\nTo follow this you'll need the following packages:\n\n```{r}\n#| message: false\n\nlibrary(RcppRoll)\nlibrary(ggplot2); theme_set(theme_bw())\nlibrary(dplyr)\n```\n\nI recently used rolling functions to deal with a data puzzle of my own. We had case data for a respiratory disease across multiple states and wanted to identify the start of the oubreak in each state. In this case, a state was considered in an outbreak after three consecutive days of new cases. The data looked something like this:\n\n```{r}\nset.seed(8675309)\n#create simulated case data\ncase.data <- data.frame(expand.grid(state = c(\"Georgia\", \"Florida\", \"North Carolina\", \"Alabama\", \"Mississippi\"),\n  day = seq(1,50))) %>%\n  #simulate cases\n  rowwise() %>%\n  mutate(cases = rpois(1,lambda = day^(1/3)))\n\n#randomly add some zeros to the beginning of the time series\nfor (i in 1:length(unique(case.data$state))){\n  this.zero.index <- sample(1:30, rpois(1,lambda=8))\n  case.data <- mutate(case.data, cases = case_when(\n    state == unique(case.data$state)[i] & day %in% this.zero.index ~ as.integer(0),\n    TRUE ~ cases\n  ))\n}\n\nhead(case.data)\n```\n\nAnd this is what the cumulative cases would look like by state:\n\n```{r}\ncase.data %>%\n  group_by(state) %>%\n  mutate(cumul.case = cumsum(cases)) %>%\n  ggplot(aes(x = day, y = cumul.case, color = state)) +\n  geom_line() +\n  xlim(0,15) +\n  ylim(0,35)\n```\n\nThe steps to finding the first day of an outbreak (i.e. the first day of three consecutive days with cases) are as follows:\n\n1. create a binary column `pos_cases` where 1 is cases>0 and 0 is cases=0\n2. create a column that is the cumulative sum of `pos_cases` over the prior three days, ranging from 0 - 3, with 3 signifyingp an outbreak\n3. find the first day of the outbreak for each state\n\nUse an `ifelse` statement to create the new column `pos_cases`\n\n```{r}\ncase.data <- case.data %>%\n  mutate(pos_cases = ifelse(cases>0,1,0))\n\nhead(case.data)\n```\n\nUse the `roll_sum` function from the RcppRoll package to calculate the number of days in the past three days that had cases. I group by `state` here since we want to do it for each state. \n\n`n` corresponds to the window size, here 3 and the alignment of the window is specified as either \"center\", \"left\", or \"right\". The easiest way to translate this to a column is to think of the column as a vector, so \"right\" would mean the window includes cells before the focal cell. \n\n\n![A schematic of how different \"rolling\" functions are applied to data.](roll_alignments.png)\n\n\nThe final argument is `fill` which provides a value to fill in cells that cannot be calculated because their window is incomplete. For this example, it would be days 1 and 2.\n\n```{r}\ncase.data <- case.data %>%\n  group_by(state) %>%\n  arrange(day) %>%\n  mutate(sum_3day = roll_sum(x = pos_cases, n = 3, align = \"right\", fill = NA)) %>%\n  ungroup()\n\narrange(case.data, state, day)[1:8,]\n```\n\nFinally, identify the first day of each outbreak by filtering the dataset only to those days that were the third day of the consecutive three days of cases, finding the minimum day for each state, and subtracting two to get to the start of the outbreak (since it began two days prior to when the outbreak was categorized)\n\n```{r}\noutbreak.day <- case.data %>%\n  filter(sum_3day == 3) %>%\n  group_by(state) %>%\n  summarise(outbreak_day = min(day)-2) %>%\n  ungroup()\n\noutbreak.day\n```\n\nThe `roll` family of functions is useful for many data manipulations over time and includes variations such as `roll_min`, `roll_min` and `roll_max`. All work similar to the `roll_sum` one described above.\n\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"index.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.2.253","theme":{"dark":"cyborg","light":"flatly"},"title-block-banner":true,"title":"Rolling Functions Along columns","description":"How to apply aggregate functions that 'roll' across data","author":"Michelle Evans","date":"2/11/2020","draft":false},"extensions":{"book":{"multiFile":true}}}}}