{"title":"Adding Leading Zeros to Strings","markdown":{"yaml":{"title":"Adding Leading Zeros to Strings","description":"How to add zeros (or other characters) to the front of a string vector","author":"Michelle Evans","date":"2022-02-27","draft":false,"image":"zeros.png"},"headingText":"Why add leading zeros?","containsRefs":false,"markdown":"\nWe all have that one StackOverflow post that we visit multiple times a week because we just can't remember exactly how to do that one thing. For me, it is [this SO post](https://stackoverflow.com/questions/5812493/how-to-add-leading-zeros) on adding leading zeros to character strings. This is something I do often when automatically naming files or creating a key/identifier column for a dataset.\n\n\nIMO, the primary reasons to add leading zeros to a character string are 1) so that ordering your character strings matches the actual numerical order and 2) to keep all of your strings the same length for easy subsetting later. We can explore this with two example datasets, one without leading zeros and one with, that may resemble a list of filenames or identification codes for samples that we are likely to see in data. They are a list of 100 samples with an identification number for each sample.\n\n```{r}\n#create a dataset without adding zeros\nids.noAdd <- paste(\"sample\", 1:100, sep = \"_\")\n#create a dataset with leading zeros using str_pad (see below for how this works)\nids.wZeros <- paste(\"sample\", stringr::str_pad(1:100, 4, pad = \"0\"), sep = \"_\")\n```\n\nThe list where we have samples without added zeros looks like this:\n\n```{r}\nids.noAdd[1:10]\n```\n\nCompare that to the list where we have added zeros, so that the number of the file always has 4 digits.\n\n```{r}\nids.wZeros[1:10]\n```\n\nThe information contained is the same (which sample it is), but the second is more computer-readable, allowing us to sort the data and subset it more easily. \n\n## Sorting Data\n\nLet's say we want to `sort` the samples, what will happen?\n\n```{r}\nsort(ids.noAdd)[1:10]\n```\n\n`sort` works by sorting by each digit. This means it groups together all of the samples that begin with 1, even though they represent 1, 10, 100, 1000 etc.\n\nThis problem goes away when we have added zeros to the beginning of the number, so that they are all four digits:\n\n```{r}\nsort(ids.wZeros)[1:10]\n```\n\n`sort` is still sorting by digit, but it recognizes from the zeros that 1 thru 9 must come before 10. \n\n## Extracting Metadata\n\nAnother thing we may want to do is subset the character string to easily extract metadata,. Often, we may save samples with names that correspond to a site, block, date, and sample number (e.g. `SITEA_BLOCK1_20220227_SAMPLE005`). Having all of these identification strings the same length means we can easily extract this information using `substr`. \n\n`substr` works by taking the starting and stopping placement of the characters you want to extract and extracting the characters between. So in the example `SITEA_BLOCK1_20220227_SAMPLE005`, if we wanted to extract the metadata on what block the sample was from, we would extract characters 7 thru 12:\n\n```{r}\nsubstr(\"SITEA_BLOCK1_20220227_SAMPLE005\", start = 7, stop = 12)\n```\n\nWe can also use `substr` over a vector of character strings. For example, let's say we wanted to just extract the number of each sample. This becomes difficult for the vector without added zeros because each sample identification is a different length:\n\n```{r}\ntable(nchar(ids.noAdd))\n```\n\nWe know we need to start the extraction at digit 8, but where we stop depends on the length of each string. One way to deal with this is to supply the number of characters in the string (found using `nchar`) as the stopping point:\n\n```{r}\nsubstr(ids.noAdd, start = 8, stop = nchar(ids.noAdd))\n```\n\nYou can also provide a stopping point that you know is longer than all the strings and `substr` will just extract as much as it can:\n\n```{r}\nsubstr(ids.noAdd, start = 8, stop = 20)\n```\n\n\nThese two methods work, but only because we want to extract until the end of the string. This would be much more complicated if the stopping point was in a different place for each sample. \n\nWith the sample ID's with added zeros, all of the character strings are the same length with 11 digits:\n\n```{r}\ntable(nchar(ids.wZeros))\n```\n\nThis means we can just supply digit 8 as our starting digit and digit 11 as our stopping digit to the `substr` call, and extract all the sample numbers:\n\n```{r}\nsubstr(ids.wZeros, start = 8, stop = 11)\n```\n\nWhile there is usually some workaround for when strings are not standardized like this, I find it easier to just standardize from the beginning to avoid any problems later in the workflow. And an easy way to do that is by adding leading 0's to character strings containing numbers. A good rule of thumb is to always add one more than you think you need (so if you think you will only go up to three digits (eg 999), make it four just in case).\n\n# Adding Leading Zeros\n\nThere are many many different ways to add leading zeros, depending on what suite of packages you prefer to use. Here are the ones I like, and the pros and cons of each.\n\n## `formatC` in base R\n\nIf you don't want to add any dependencies, `formatC` is a function that is in base R that lets you add leading zeros:\n\n```{r}\nformatC(x = 1:100, width = 4, format = \"d\", flag = \"0\")\n```\n\nThe arguments you provide are:\n\n- `x` the vector of numbers or strings you would like to add leading 0's to\n- `width` the final width you would like each string to have\n- `format` what class you want the output to be. `\"d\"` is for integers (default)\n- `flag` signifies what modification you will be doing to `x`. `\"0\"` adds leading zeros\n\n**Pros**\n\n- very fast because it is based in `C`\n- understandable for those who are already used to `C` formats\n\n\n**Cons**\n\n- language is not intuitive to those not familiar with `C` \n- the modification is limited by those provided by `flag`, so cannot add other characters as leading characters\n\n\n## Using the `str_pad` function from the `stringr` package\n\nIf you don't mind using another package, then a great option is the `stringr` package. It is part of the tidyverse, which means it comes with a lot of [supporting documentation](https://stringr.tidyverse.org/) for string manipulations.\n\nThe `str_pad` function from this pacakge is made for exactly this purpose, \"padding\" or adding characters to a string:\n\n```{r}\nlibrary(stringr)\nstr_pad(string = 1:100, width = 4, side = \"left\", pad = \"0\")\n```\n\nThe arguments are:\n\n- `string` the vector of character strings you would like to pad\n- `width` the final width of the character string you would like\n- `side` what side of the string you would like to add the padding (left = before the string, right = after)\n- `pad` a single character that you would like to use to pad. It will be repeated when more than one digit is added.\n\n**Pros**\n\n- more intuitive language and arguments\n- ability to pad both sides of the string\n- more flexibility in what character is used to pad compared to `formatC`\n\n**Cons**\n\n- requires another package to use\n- is affected by the scientific penalty option\n\nThe major downside to this package is that numbers will resort to the scientific notation (e.g. `1e10`) if their digits are more than the scientific penalty option defined in R:\n\n```{r}\nex1 <- c(1000000000)\nstr_pad(ex1, width = 13, side = \"left\", pad = \"0\")\n```\n\nIn comparison, if you use `formatC`, it will keep all of the zeros:\n\n```{r}\nformatC(ex1, width = 13, format = \"d\", flag = \"0\")\n```\n\nI  usually have my scientific penalty essentially turned off (`options(scipen=999)`) by default because I find it easier to problem-check my own data. But you could also change your options just for this bit of code if you'd like to keep your scientific penalty threshold:\n\n```{r}\nwith(options(scipen = 999),\n     str_pad(ex1, width = 13, side = \"left\", pad = \"0\")\n     )\n```\n\n## Comparing Performance\n\nTo me, the trade-off between these two options is the speed of `formatC` vs. the more intuitive language of `str_pad` for us non-C users. But just how much faster is `formatC`?\n\n```{r}\nlibrary(microbenchmark)\n\nmicrobenchmark(\n  pad_c = formatC(x = 1:1e5, width = 8, format = \"d\", flag = \"0\"),\n  stringr = with(options(scipen = 999), str_pad(string = 1:1e5, width = 8, side = \"left\", pad = \"0\")),\n  times = 25\n)\n```\n\nLooks like `formatC` is at least twice as fast as using `str_pad`, so depending on the size of the dataset or how many times you are replicating padding zeros, it may be worth using `formatC`, even if you do have to look up again which format corresponds to integers!\n\n# TL;DR\n\nIf you are familiar with `C` style language or don't mind learning, use `formatC`.\n\nIf you prefer using a `tidyverse` method, use `str_pad` from the `stringr` package.","srcMarkdownNoYaml":"\nWe all have that one StackOverflow post that we visit multiple times a week because we just can't remember exactly how to do that one thing. For me, it is [this SO post](https://stackoverflow.com/questions/5812493/how-to-add-leading-zeros) on adding leading zeros to character strings. This is something I do often when automatically naming files or creating a key/identifier column for a dataset.\n\n# Why add leading zeros?\n\nIMO, the primary reasons to add leading zeros to a character string are 1) so that ordering your character strings matches the actual numerical order and 2) to keep all of your strings the same length for easy subsetting later. We can explore this with two example datasets, one without leading zeros and one with, that may resemble a list of filenames or identification codes for samples that we are likely to see in data. They are a list of 100 samples with an identification number for each sample.\n\n```{r}\n#create a dataset without adding zeros\nids.noAdd <- paste(\"sample\", 1:100, sep = \"_\")\n#create a dataset with leading zeros using str_pad (see below for how this works)\nids.wZeros <- paste(\"sample\", stringr::str_pad(1:100, 4, pad = \"0\"), sep = \"_\")\n```\n\nThe list where we have samples without added zeros looks like this:\n\n```{r}\nids.noAdd[1:10]\n```\n\nCompare that to the list where we have added zeros, so that the number of the file always has 4 digits.\n\n```{r}\nids.wZeros[1:10]\n```\n\nThe information contained is the same (which sample it is), but the second is more computer-readable, allowing us to sort the data and subset it more easily. \n\n## Sorting Data\n\nLet's say we want to `sort` the samples, what will happen?\n\n```{r}\nsort(ids.noAdd)[1:10]\n```\n\n`sort` works by sorting by each digit. This means it groups together all of the samples that begin with 1, even though they represent 1, 10, 100, 1000 etc.\n\nThis problem goes away when we have added zeros to the beginning of the number, so that they are all four digits:\n\n```{r}\nsort(ids.wZeros)[1:10]\n```\n\n`sort` is still sorting by digit, but it recognizes from the zeros that 1 thru 9 must come before 10. \n\n## Extracting Metadata\n\nAnother thing we may want to do is subset the character string to easily extract metadata,. Often, we may save samples with names that correspond to a site, block, date, and sample number (e.g. `SITEA_BLOCK1_20220227_SAMPLE005`). Having all of these identification strings the same length means we can easily extract this information using `substr`. \n\n`substr` works by taking the starting and stopping placement of the characters you want to extract and extracting the characters between. So in the example `SITEA_BLOCK1_20220227_SAMPLE005`, if we wanted to extract the metadata on what block the sample was from, we would extract characters 7 thru 12:\n\n```{r}\nsubstr(\"SITEA_BLOCK1_20220227_SAMPLE005\", start = 7, stop = 12)\n```\n\nWe can also use `substr` over a vector of character strings. For example, let's say we wanted to just extract the number of each sample. This becomes difficult for the vector without added zeros because each sample identification is a different length:\n\n```{r}\ntable(nchar(ids.noAdd))\n```\n\nWe know we need to start the extraction at digit 8, but where we stop depends on the length of each string. One way to deal with this is to supply the number of characters in the string (found using `nchar`) as the stopping point:\n\n```{r}\nsubstr(ids.noAdd, start = 8, stop = nchar(ids.noAdd))\n```\n\nYou can also provide a stopping point that you know is longer than all the strings and `substr` will just extract as much as it can:\n\n```{r}\nsubstr(ids.noAdd, start = 8, stop = 20)\n```\n\n\nThese two methods work, but only because we want to extract until the end of the string. This would be much more complicated if the stopping point was in a different place for each sample. \n\nWith the sample ID's with added zeros, all of the character strings are the same length with 11 digits:\n\n```{r}\ntable(nchar(ids.wZeros))\n```\n\nThis means we can just supply digit 8 as our starting digit and digit 11 as our stopping digit to the `substr` call, and extract all the sample numbers:\n\n```{r}\nsubstr(ids.wZeros, start = 8, stop = 11)\n```\n\nWhile there is usually some workaround for when strings are not standardized like this, I find it easier to just standardize from the beginning to avoid any problems later in the workflow. And an easy way to do that is by adding leading 0's to character strings containing numbers. A good rule of thumb is to always add one more than you think you need (so if you think you will only go up to three digits (eg 999), make it four just in case).\n\n# Adding Leading Zeros\n\nThere are many many different ways to add leading zeros, depending on what suite of packages you prefer to use. Here are the ones I like, and the pros and cons of each.\n\n## `formatC` in base R\n\nIf you don't want to add any dependencies, `formatC` is a function that is in base R that lets you add leading zeros:\n\n```{r}\nformatC(x = 1:100, width = 4, format = \"d\", flag = \"0\")\n```\n\nThe arguments you provide are:\n\n- `x` the vector of numbers or strings you would like to add leading 0's to\n- `width` the final width you would like each string to have\n- `format` what class you want the output to be. `\"d\"` is for integers (default)\n- `flag` signifies what modification you will be doing to `x`. `\"0\"` adds leading zeros\n\n**Pros**\n\n- very fast because it is based in `C`\n- understandable for those who are already used to `C` formats\n\n\n**Cons**\n\n- language is not intuitive to those not familiar with `C` \n- the modification is limited by those provided by `flag`, so cannot add other characters as leading characters\n\n\n## Using the `str_pad` function from the `stringr` package\n\nIf you don't mind using another package, then a great option is the `stringr` package. It is part of the tidyverse, which means it comes with a lot of [supporting documentation](https://stringr.tidyverse.org/) for string manipulations.\n\nThe `str_pad` function from this pacakge is made for exactly this purpose, \"padding\" or adding characters to a string:\n\n```{r}\nlibrary(stringr)\nstr_pad(string = 1:100, width = 4, side = \"left\", pad = \"0\")\n```\n\nThe arguments are:\n\n- `string` the vector of character strings you would like to pad\n- `width` the final width of the character string you would like\n- `side` what side of the string you would like to add the padding (left = before the string, right = after)\n- `pad` a single character that you would like to use to pad. It will be repeated when more than one digit is added.\n\n**Pros**\n\n- more intuitive language and arguments\n- ability to pad both sides of the string\n- more flexibility in what character is used to pad compared to `formatC`\n\n**Cons**\n\n- requires another package to use\n- is affected by the scientific penalty option\n\nThe major downside to this package is that numbers will resort to the scientific notation (e.g. `1e10`) if their digits are more than the scientific penalty option defined in R:\n\n```{r}\nex1 <- c(1000000000)\nstr_pad(ex1, width = 13, side = \"left\", pad = \"0\")\n```\n\nIn comparison, if you use `formatC`, it will keep all of the zeros:\n\n```{r}\nformatC(ex1, width = 13, format = \"d\", flag = \"0\")\n```\n\nI  usually have my scientific penalty essentially turned off (`options(scipen=999)`) by default because I find it easier to problem-check my own data. But you could also change your options just for this bit of code if you'd like to keep your scientific penalty threshold:\n\n```{r}\nwith(options(scipen = 999),\n     str_pad(ex1, width = 13, side = \"left\", pad = \"0\")\n     )\n```\n\n## Comparing Performance\n\nTo me, the trade-off between these two options is the speed of `formatC` vs. the more intuitive language of `str_pad` for us non-C users. But just how much faster is `formatC`?\n\n```{r}\nlibrary(microbenchmark)\n\nmicrobenchmark(\n  pad_c = formatC(x = 1:1e5, width = 8, format = \"d\", flag = \"0\"),\n  stringr = with(options(scipen = 999), str_pad(string = 1:1e5, width = 8, side = \"left\", pad = \"0\")),\n  times = 25\n)\n```\n\nLooks like `formatC` is at least twice as fast as using `str_pad`, so depending on the size of the dataset or how many times you are replicating padding zeros, it may be worth using `formatC`, even if you do have to look up again which format corresponds to integers!\n\n# TL;DR\n\nIf you are familiar with `C` style language or don't mind learning, use `formatC`.\n\nIf you prefer using a `tidyverse` method, use `str_pad` from the `stringr` package."},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"toc-depth":3,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.353","theme":"minty","title-block-banner":false,"title":"Adding Leading Zeros to Strings","description":"How to add zeros (or other characters) to the front of a string vector","author":"Michelle Evans","date":"2022-02-27","draft":false,"image":"zeros.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}