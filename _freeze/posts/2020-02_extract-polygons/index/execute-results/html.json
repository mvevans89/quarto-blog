{
  "hash": "c0b91b8615310f918497a8375304fc6e",
  "result": {
    "markdown": "---\ntitle: \"Extract Data From Spatial Polygons\"\ndescription: \"How to add zeros (or other characters) to the front of a string vector\"\nauthor: \"Michelle Evans\"\ndate: \"2020-02-22\"\neditor: source\ndraft: false\nimage: overlay-img.png\n---\n\n\nIf you work with spatial data, you are probably familiar with the `extract` function from the raster package, which extracts values from a RasterLayer or RasterStack to polygons or points. This is the type of function you may use when you want to know the elevation at a latitude/longitude value or the mean temperature within a county polygon.\n\nThis function only works when you value you want to extract is in a raster. If you want to extract from a vector layer, you'll need to use another operation or function. This technique is a type of vector overlay that is similar to an [intersect operation](http://wiki.gis.com/wiki/index.php/Intersect).\n\n![](overlay-img.png)\n\nI'll go over the full workflow below, but the function is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_join(points, polygons, join = st_intersects)\n```\n:::\n\n\nThis is from the `sf` package, and you provide it with the point and polygon vector data, both as sf objects.\n\nAs an example, I'll go through extracting state names to some random points.\n\nThe `USAboundaries` package has spatial data for the US. It can be installed from the ROpenSci repository.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# install.packages(\"USAboundariesData\", repos = \"http://packages.ropensci.org\")\nlibrary(USAboundaries)\nlibrary(USAboundariesData)\nlibrary(sf)\nlibrary(ggplot2)\n\nstates <- us_states()\ncities <- us_cities()\n\n#due to an problem between differnt PROJ version, must manually set the CRS\nst_crs(states) <- 4326\nst_crs(cities) <- 4326\n```\n:::\n\n\nWe'll just choose 100 cities at random and plot them over the states to get an idea of what this looks like. I'm going to zoom in on the East Coast just for visualization purposes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampled.cities <- cities[sample(1:nrow(cities), 100, replace = F),]\n\nggplot() +\n  geom_sf(data = states) +\n  geom_sf(data = sampled.cities) +\n  theme_void() +\n  coord_sf(xlim = c(-95,-60), ylim = c(25,50)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWe'll drop some columns so it is easier to see how the extracted values are added to the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampled.cities <- dplyr::select(sampled.cities, city, state_name)\n\nhead(sampled.cities)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -123.3595 ymin: 34.20419 xmax: -79.2535 ymax: 44.54197\nCRS:           EPSG:4326\n# A tibble: 6 × 3\n  city          state_name                 geometry\n  <chr>         <chr>                   <POINT [°]>\n1 Wahoo         Nebraska       (-96.61662 41.21499)\n2 Cincinnati    Ohio            (-84.50645 39.1399)\n3 Mullins       South Carolina  (-79.2535 34.20419)\n4 Downers Grove Illinois       (-88.02123 41.79503)\n5 Philomath     Oregon         (-123.3595 44.54197)\n6 Edgerton      Wisconsin      (-89.07108 42.83823)\n```\n:::\n:::\n\n\nWe can then extract the values held in the polygons to the points. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint.extraction <- st_join(sampled.cities, states, join = st_intersects)\n\nhead(point.extraction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -123.3595 ymin: 34.20419 xmax: -79.2535 ymax: 44.54197\nCRS:           EPSG:4326\n# A tibble: 6 × 15\n  city    state…¹             geometry statefp statens  affgeoid    geoid stusps\n  <chr>   <chr>            <POINT [°]> <chr>   <chr>    <chr>       <chr> <chr> \n1 Wahoo   Nebras… (-96.61662 41.21499) 31      01779792 0400000US31 31    NE    \n2 Cincin… Ohio     (-84.50645 39.1399) 39      01085497 0400000US39 39    OH    \n3 Mullins South …  (-79.2535 34.20419) 45      01779799 0400000US45 45    SC    \n4 Downer… Illino… (-88.02123 41.79503) 17      01779784 0400000US17 17    IL    \n5 Philom… Oregon  (-123.3595 44.54197) 41      01155107 0400000US41 41    OR    \n6 Edgert… Wiscon… (-89.07108 42.83823) 55      01779806 0400000US55 55    WI    \n# … with 7 more variables: name <chr>, lsad <chr>, aland <dbl>, awater <dbl>,\n#   state_name.y <chr>, state_abbr <chr>, jurisdiction_type <chr>, and\n#   abbreviated variable name ¹​state_name.x\n```\n:::\n:::\n\n\nThis extracts all of the columns from the `states` object to the city points, but you can also specify which columns you want by using `select` nested within the `st_join` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate.abbr.extraction <- st_join(sampled.cities, dplyr::select(states, state_abbr), \n                                 join = st_intersects)\n\nhead(state.abbr.extraction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -123.3595 ymin: 34.20419 xmax: -79.2535 ymax: 44.54197\nCRS:           EPSG:4326\n# A tibble: 6 × 4\n  city          state_name                 geometry state_abbr\n  <chr>         <chr>                   <POINT [°]> <chr>     \n1 Wahoo         Nebraska       (-96.61662 41.21499) NE        \n2 Cincinnati    Ohio            (-84.50645 39.1399) OH        \n3 Mullins       South Carolina  (-79.2535 34.20419) SC        \n4 Downers Grove Illinois       (-88.02123 41.79503) IL        \n5 Philomath     Oregon         (-123.3595 44.54197) OR        \n6 Edgerton      Wisconsin      (-89.07108 42.83823) WI        \n```\n:::\n:::\n\n\nJust remember that when you want to \"extract\" polygons with `sf` what you are really doing is taking the results of a spatial `join` where the polygons `intersect`.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}