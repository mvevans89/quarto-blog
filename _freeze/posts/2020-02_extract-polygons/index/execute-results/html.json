{
  "hash": "d15c0d796313778e090e37d3c63390cc",
  "result": {
    "markdown": "---\ntitle: \"Extract Data From Spatial Polygons\"\ndescription: \"How to add zeros (or other characters) to the front of a string vector\"\nauthor: \"Michelle Evans\"\ndate: \"2020-02-22\"\neditor: source\ndraft: false\nimage: overlay-img.png\n---\n\n\nIf you work with spatial data, you are probably familiar with the `extract` function from the raster package, which extracts values from a RasterLayer or RasterStack to polygons or points. This is the type of function you may use when you want to know the elevation at a latitude/longitude value or the mean temperature within a county polygon.\n\nThis function only works when you value you want to extract is in a raster. If you want to extract from a vector layer, you'll need to use another operation or function. This technique is a type of vector overlay that is similar to an [intersect operation](http://wiki.gis.com/wiki/index.php/Intersect).\n\n![](overlay-img.png)\n\nI'll go over the full workflow below, but the function is:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_join(points, polygons, join = st_intersects)\n```\n:::\n\n\nThis is from the `sf` package, and you provide it with the point and polygon vector data, both as sf objects.\n\nAs an example, I'll go through extracting state names to some random points.\n\nThe `USAboundaries` package has spatial data for the US. It can be installed from the ROpenSci repository.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"USAboundariesData\", repos = \"http://packages.ropensci.org\")\nlibrary(USAboundaries)\nlibrary(USAboundariesData)\nlibrary(sf)\nlibrary(ggplot2)\n\nstates <- us_states()\ncities <- us_cities()\n\n#due to an problem between differnt PROJ version, must manually set the CRS\nst_crs(states) <- 4326\nst_crs(cities) <- 4326\n```\n:::\n\n\nWe'll just choose 100 cities at random and plot them over the states to get an idea of what this looks like. I'm going to zoom in on the East Coast just for visualization purposes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampled.cities <- cities[sample(1:nrow(cities), 100, replace = F),]\n\nggplot() +\n  geom_sf(data = states) +\n  geom_sf(data = sampled.cities) +\n  theme_void() +\n  coord_sf(xlim = c(-95,-60), ylim = c(25,50)) \n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nWe'll drop some columns so it is easier to see how the extracted values are added to the dataset.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsampled.cities <- dplyr::select(sampled.cities, city, state_name)\n\nhead(sampled.cities)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 2 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -90.47181 ymin: 35.72493 xmax: -72.92495 ymax: 43.38012\nCRS:           EPSG:4326\n# A tibble: 6 × 3\n  city             state_name              geometry\n  <chr>            <chr>                <POINT [°]>\n1 Maryland Heights Missouri    (-90.47181 38.71691)\n2 New Haven        Connecticut (-72.92495 41.31081)\n3 Luray            Virginia    (-78.45448 38.66418)\n4 Alma             Michigan    (-84.65591 43.38012)\n5 Syracuse         New York      (-76.14355 43.041)\n6 Gatlinburg       Tennessee   (-83.49364 35.72493)\n```\n:::\n:::\n\n\nWe can then extract the values held in the polygons to the points. \n\n\n::: {.cell}\n\n```{.r .cell-code}\npoint.extraction <- st_join(sampled.cities, states, join = st_intersects)\n\nhead(point.extraction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 14 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -90.47181 ymin: 35.72493 xmax: -72.92495 ymax: 43.38012\nCRS:           EPSG:4326\n# A tibble: 6 × 15\n  city    state…¹             geometry statefp statens  affgeoid    geoid stusps\n  <chr>   <chr>            <POINT [°]> <chr>   <chr>    <chr>       <chr> <chr> \n1 Maryla… Missou… (-90.47181 38.71691) 29      01779791 0400000US29 29    MO    \n2 New Ha… Connec… (-72.92495 41.31081) 09      01779780 0400000US09 09    CT    \n3 Luray   Virgin… (-78.45448 38.66418) 51      01779803 0400000US51 51    VA    \n4 Alma    Michig… (-84.65591 43.38012) 26      01779789 0400000US26 26    MI    \n5 Syracu… New Yo…   (-76.14355 43.041) 36      01779796 0400000US36 36    NY    \n6 Gatlin… Tennes… (-83.49364 35.72493) 47      01325873 0400000US47 47    TN    \n# … with 7 more variables: name <chr>, lsad <chr>, aland <dbl>, awater <dbl>,\n#   state_name.y <chr>, state_abbr <chr>, jurisdiction_type <chr>, and\n#   abbreviated variable name ¹​state_name.x\n```\n:::\n:::\n\n\nThis extracts all of the columns from the `states` object to the city points, but you can also specify which columns you want by using `select` nested within the `st_join` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstate.abbr.extraction <- st_join(sampled.cities, dplyr::select(states, state_abbr), \n                                 join = st_intersects)\n\nhead(state.abbr.extraction)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -90.47181 ymin: 35.72493 xmax: -72.92495 ymax: 43.38012\nCRS:           EPSG:4326\n# A tibble: 6 × 4\n  city             state_name              geometry state_abbr\n  <chr>            <chr>                <POINT [°]> <chr>     \n1 Maryland Heights Missouri    (-90.47181 38.71691) MO        \n2 New Haven        Connecticut (-72.92495 41.31081) CT        \n3 Luray            Virginia    (-78.45448 38.66418) VA        \n4 Alma             Michigan    (-84.65591 43.38012) MI        \n5 Syracuse         New York      (-76.14355 43.041) NY        \n6 Gatlinburg       Tennessee   (-83.49364 35.72493) TN        \n```\n:::\n:::\n\n\nJust remember that when you want to \"extract\" polygons with `sf` what you are really doing is taking the results of a spatial `join` where the polygons `intersect`.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}