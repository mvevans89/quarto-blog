{
  "hash": "4914568aad3848f0c81cdc02d664d91b",
  "result": {
    "markdown": "---\ntitle: \"Mapping space\"\ndescription: \"Day 9 of the #30DayMapChallenge - Space\"\nauthor: \"Michelle Evans\"\ndate: \"2022-11-09\"\ndraft: false\nimage: header-space.jpg\nexecute:\n  warning: false\n  message: false\n---\n\n\n![Photo by <a href=\"https://unsplash.com/@denisdegioanni?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Denis Degioanni</a> on <a href=\"https://unsplash.com/s/photos/milky-way?utm_source=unsplash&utm_medium=referral&utm_content=creditCopyText\">Unsplash</a>](header-space.jpg)\n\n\n\n\n\n\n\nFor the space theme, I wanted to make a map of outer space, specifically the Milky Way. For the data, I followed this [super detailed blog post](https://kimnewzealand.github.io/2019/02/21/celestial-maps/) by [Kim Fitter](https://github.com/kimnewzealand). It has the source for some maps of outer space from the [d3-celestial package](https://github.com/ofrohn/d3-celestial) and how to trouble-shoot some issues with the data, specifically problems with dateline wrapping. If you're interested in learning more about celestial mapping, check out that blog post! Below is the code to download and clean the map of the milky way, based on the post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read in json with sf\nmw.url <- \"https://raw.githubusercontent.com/ofrohn/d3-celestial/master/data/mw.json\"\nmw.sf <- st_read(mw.url,stringsAsFactors = FALSE)\n\n#have to wrap the dateline to get rid of lines\nmilky.wrap <- mw.sf %>% \n       st_cast(\"MULTILINESTRING\") %>%  \n       st_cast(\"LINESTRING\") %>%\n       group_by(id) %>%  \n       st_wrap_dateline(options = c(\"WRAPDATELINE=YES\", \"DATELINEOFFSET=180\")) %>%\n  ungroup()\n\n#issue with some multi-polygons after the wrapping\nmilky.wrap[3:202,] <- milky.wrap[3:202,] %>% \n      st_cast(\"MULTIPOLYGON\") \n\n#transform to polar stereographic because it looks cool\nnew.crs <- 3995\nmilky.trans <- st_transform(milky.wrap, crs = new.crs)\n#these are fully enclosed polygons\nmilky.poly <- concaveman::concaveman(milky.trans[1:2,]) %>%\n  st_transform(crs = new.crs) %>%\n  st_zm()\n```\n:::\n\n\nI then chose a spacey [color palette]( https://icolorpalette.com/imagepalette/color-palette-ideas-from-galaxy-atmosphere-spiral-image-2), to set the theme of the map. Then I randomly assigned these colors and different alpha values to the differ polygon lines of the milky way `sf` object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#ordered dark to light\nspace.pal <- c(\"#9eadcf\", \"#7496c1\", \"#54526a\", \"#5754a8\", \"#34344d\")\n\nmilky.plot <- milky.trans %>%\n  mutate(randomcol = sample(letters[1:5], size = 202, replace = T)) %>%\n  mutate(randomalpha = runif(202))\n```\n:::\n\n\nI also created a nice star background by generating 1000 random points within the bounding box and assigning them different values of gray so they would like look like they were different distances away, and therefore different levels of brightness.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot.bbox <- st_bbox(milky.plot)\nstars <- data.frame(x = runif(1000,plot.bbox[1],\n                              plot.bbox[3]),\n                    y = runif(1000, plot.bbox[2],\n                              plot.bbox[4])) %>%\n  #randomize color\n  mutate(randomcol = sample(paste0(\"gray\", seq(10,100, by = 10)),\n                            1000, replace = T))\n```\n:::\n\n\nThen I plotted it, setting the background to black and using the fully enclosed polygons of the milky way to add depth by plotting it as a background with higher transparency. And of course, added a space-themed font for the title, this time [Orbitron Black](https://www.1001fonts.com/orbitron-font.html)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#easier to read caption\ncaption.lab <- paste0(\"#30DayMapChallenge <br>\",\n                      \"<b>Source: </b>d3 celestial<br>\",\n                      \"<span style='font-family:fa-brands;'>&#xf113;</span> mvevans89\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_point(data = stars, aes(x = x, y = y, color = randomcol), \n             size = 0.001) +\n  scale_color_manual(values = paste0(\"gray\", seq(10,100, by = 10)), \n                     guide = 'none') +\n  geom_sf(data = milky.poly, fill = space.pal[2], \n          alpha = 0.2, color = NA) +\n  ggnewscale::new_scale_color() +\n  geom_sf(data = milky.plot, aes(color = \"white\", fill = randomcol), \n          size = 0.2, alpha = 0.6) +\n  scale_fill_manual(values = space.pal, guide = 'none') +\n  scale_color_manual(values = space.pal, guide = 'none') +\n  labs(caption = caption.lab,\n       title = \"The Polar Milky Way\") +\n  theme(panel.background = element_rect(fill = \"black\", color = \"black\"),\n        panel.grid.major = element_line(color = \"gray20\", linetype = \"dotted\"),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        plot.background = element_rect(fill = 'black', color = 'black'),\n        plot.caption  = element_markdown(family = \"sans\", hjust = 1, size = 9,\n                                         color = \"gray60\"),\n        plot.title = element_markdown(family = \"orbitron\", color = 'white', \n                                      hjust = 0.5, size = 18),\n        plot.margin = unit(rep(0.2,4), \"cm\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n![](milky-way.png){fig-align=\"center\" width=12cm}",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}