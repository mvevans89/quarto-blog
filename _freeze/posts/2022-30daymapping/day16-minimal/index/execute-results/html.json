{
  "hash": "ac9f0e7b5257eae891cf5d264eb5b077",
  "result": {
    "markdown": "---\ntitle: \"Contour maps in ggplot2\"\ndescription: \"Day 16 of the #30DayMapChallenge - Minimal\"\nauthor: \"Michelle Evans\"\ndate: \"2022-11-16\"\ndraft: false\nimage: tana-hill.jpg\nexecute:\n  warning: false\n  message: false\n---\n\n\n\n![Source: wikiwand.com](tana-hill.jpg)\n\n\n\n\n\nToday's map theme is 'minimal', and I've chosen to create a contour map of Antananarivo, Madagascar. Antananarivo is the capital of Madagascar. Although it's name translate as \"a thousand towns\", my experience walking around it would better describe it as \"a thousand hills\". Like much of Madagascar, it is in a mountainous highland region, and is what one might call topographically complex. Luckily, there are many, sometimes steep, staircases to help everyone get around, including a famous set of staircases near Anakaley market (below).\n\n::: {layout-ncol=2}\n![Location of Antanarivo in Madagascar.<br>Source: World Atlast](world-atlas.jpeg)\n\n![Stairs going towards Analakely market.<br>Source: wikiwand.com](tana-steps.jpg)\n:::\n\n## General workflow for creating contour maps in R\n\nContour maps are a type of topographic map that show changes in elevation using contour lines drawn at different values of elevation. Before the use of computer-generated raster images, they were the most common way of showing elevation in a method that could be hand-drawn. These maps are still used today, and what we often imagine when we think of topographic paper maps.\n\nGenerating these maps in `R` can be very straight-forward because `ggplot` already has a `geom` that is expressely made for this purpose, called [`geom_contour`](https://ggplot2.tidyverse.org/reference/geom_contour.html). All you need is a raster image to plot. Again, there is a package for this! [Elevatr](https://cran.r-project.org/web/packages/elevatr/vignettes/introduction_to_elevatr.html) is R package that facilitates the downloading of elevation raster images. \n\n## An example of plotting contour lines: Antananarivo\n\n### Download the elevation raster\n\nThere are several ways to download raster images via the `elevatr` package. For now, we will focus on downloading the [Mapzen composite](https://github.com/tilezen/joerd/blob/master/docs/data-sources.md) that combines multiple datasets to estimate elevation because it doesn't require setting up an account to download. For Antananarivo, this essentially ends up being [SRTM data](https://lta.cr.usgs.gov/SRTM), because it is the only dataset available for the region. You can choose the image to download by providing coordinates or an `sp` object. Here, we will provide the longitude and latitude of Antananarivo to the `get_elev_raster` function. \n\nThe Mapzen data also requires a zoom level, where increasingly high numbers corresponding to increasingly high resolution (smaller pixels). The actually values of the resolution are noted on their [github](https://github.com/tilezen/joerd/blob/master/docs/data-sources.md). We will use a zoom of 12, which corresponds to a resolution fo 38m at the equator.\n\nWe can also provide a projection or coordinate reference system (CRS), so that the image is immediately able to plotted in geographic space. For convenience, we will just use the WGS84 projection, described via the string `\"+proj=longlat +datum=WGS84\"`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntana.coords <- data.frame(x = 47.5, y = -18.88)\n\ntana.dem <- get_elev_raster(locations = tana.coords,\n                            z = 12,\n                            prj = \"+proj=longlat +datum=WGS84\",\n                            source = \"aws\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nWe can then investigate the raster by simply plotting it to have an idea of what it looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(tana.dem)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nIt is like any other `raster` in R, so we can also just call the object to see some of its characteristics:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntana.dem\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass      : RasterLayer \ndimensions : 498, 526, 261948  (nrow, ncol, ncell)\nresolution : 0.0001671195, 0.0001671195  (x, y)\nextent     : 47.46094, 47.54884, -18.89594, -18.81272  (xmin, xmax, ymin, ymax)\ncrs        : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 \nsource     : file52631dc1f2f.tif \nnames      : file52631dc1f2f \nvalues     : -32768, 32767  (min, max)\n```\n:::\n:::\n\n\n### Plotting the contour lines\n\nTo plot the raster in ggplot and plot the contour lines, we first have to fortify it into a dataframe. If you don't first fortify it, you will get the following error message:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = tana.dem) +\n  geom_contour()\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in `fortify()`:\n! `data` must be a data frame, or other object coercible by `fortify()`, not an S4 object with class RasterLayer.\n```\n:::\n:::\n\n\nFortifying a raster is similar to turning a wide dataset into a long dataset. We create a row for each cell that has three columns: the x coordinate, the y coordinates, and the pixel value (z). We can use the function `as.data.frame` with `xy=T` to accomplish this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntana.df <- as.data.frame(tana.dem, xy = T)\n\nhead(tana.df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         x        y file52631dc1f2f\n1 47.46102 -18.8128            1247\n2 47.46119 -18.8128            1247\n3 47.46136 -18.8128            1247\n4 47.46152 -18.8128            1247\n5 47.46169 -18.8128            1247\n6 47.46186 -18.8128            1248\n```\n:::\n:::\n\n\nWe can see it has created columns `x` and `y` and a column corresponding to the `names` attribute of the raster which holds the value of each pixel. The name for this particularly file is pretty nonsensical, so I would recommend renaming it to something that is shorter and means something, like 'elev' for elevation. Now we can use this like any other dataframe that we would give to `ggplot`. With `geom_tile` we can use the elevation to describe the `fill` creating an image where the color of a pixel corresponds to the elevation. Then, on top of that, we can use `geom_contour` to make some contour lines, using elevaation for the `z` argument. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntana.df <- rename(tana.df, elev = file52631dc1f2f)\n\nggplot(tana.df, aes(x = x, y = y)) + \n  geom_tile(aes( fill = elev)) +\n  geom_contour(aes(z = elev))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nThe defaults for this are a bit difficult to see, so we can change some of the aesthetics and color to help with visualization. We can also change the breaks for the contour lines, so they aren't so close together. This is done via the `bins` argument to `geom_contour`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(tana.df, aes(x = x, y = y)) +\n  geom_tile(aes(fill = elev)) +\n  geom_contour(aes(z = elev), bins = 8, color = \"white\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nNow we can see how it highlights some of the really steep areas of the city.\n\n### Creating the minimal map\n\nFor the 'minimal' map theme, I just want to plot the contour lines with a blank background. This can be achieved by changing some of ggplots themes, and not using the `geom_tile` we used in the earlier plots. For the colors, I will use some of the palettes from [CARTO](https://carto.com/carto-colors/). I'm particularly fond of the Mint palette, but for this I chose two colors from the Fall palette. \n\nThen I added a title the map. Because I want it kind of in the middle, between some of the hills, I chose to use `annotate` to add the text, rather than added a formal title, which would by default be at the top of the plot. \n\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nggplot(tana.df, aes(x = x, y = y)) +\n  geom_contour(aes(z = elev), bins = 8, color = \"#3d5941\", size = 0.5) +\n  #drop all the plot oulines, axes, and grid lines\n  theme_void() +\n  #remove margins\n  scale_x_continuous(expand=c(0,0))+\n  scale_y_continuous(expand=c(0,0))+\n  annotate(geom = \"text\", x = 47.518, y = -18.825, \n           label = \"Antananarivo\", color = \"#A16928\",\n           family = \"serif\", size = 7) +\n  annotate(geom = \"text\", x = 47.518, y = -18.828,\n           label= \"18.8792° S, 47.5079° E\",color = \"#A16928\",\n           family = \"serif\", size = 5\n           ) +\n  labs(caption =  paste0(\"#30DayMapChallenge <> \",\n                      \"<b> Source: </b> SRTM <> \",\n                      \"<span style='font-family:fa-brands;'>&#xf113;</span> mvevans89\")) +\n  theme(plot.background = element_rect(fill = \"#f6edbd\", color = NA),\n        plot.caption = element_markdown(color = \"#A16928\", family = \"serif\", hjust = 0.5))\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){fig-align='center' width=384}\n:::\n:::\n\n::: {.cell}\n\n:::\n\n\n## Extracting contour lines as spatial objects\n\nThe nice thing about this workflow is that we don't have to create any of the contour lines ourselves, this is all done under the hood by `ggplot`. But what if you want to extract the lines to use as polygons in another map or to perform some spatial analyses on? We can do this using the `raterToContour` function from the `raster`. Note it can also be done with the `stars` package, but this requires GDAL version 2.4 or greater. This works example the same as our ggplot call, where we provide the raster and the number of bins or levels (remembering to do one fewer). The way the breaks are drawn may be slightly different, so the best way to ensure they are the same is to supply the actual breaks yourself, rather than the number of bins or levels. The function returns spatial lines that can then be plotted or analysed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntana.contour <- rasterToContour(tana.dem, nlevels = 7)\n\nplot(tana.contour)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntana.contour\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatialLinesDataFrame \nfeatures    : 5 \nextent      : 47.46107, 47.54871, -18.89581, -18.81285  (xmin, xmax, ymin, ymax)\ncrs         : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 \nvariables   : 1\nnames       : level \nmin values  :  1240 \nmax values  :  1320 \n```\n:::\n:::\n\n\nHappy mapping!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}